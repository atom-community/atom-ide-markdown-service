"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.highlightTreeSitter = void 0;
const atom_1 = require("atom");
const event_loop_yielder_1 = require("./utils/event-loop-yielder");
async function highlightTreeSitter(sourceCode, scopeName) {
    const yielder = event_loop_yielder_1.eventLoopYielder(100, 5000);
    const buf = new atom_1.TextBuffer();
    try {
        const grammar = atom.grammars.grammarForId(scopeName);
        const lm = atom.grammars.languageModeForGrammarAndBuffer(grammar, buf);
        buf.setLanguageMode(lm);
        buf.setText(sourceCode);
        const end = buf.getEndPosition();
        if (lm.startTokenizing)
            lm.startTokenizing();
        await tokenized(lm);
        const iter = lm.buildHighlightIterator();
        if (iter.getOpenScopeIds && iter.getCloseScopeIds) {
            let pos = { row: 0, column: 0 };
            iter.seek(pos);
            const res = [];
            while (pos.row < end.row || (pos.row === end.row && pos.column <= end.column)) {
                res.push(...iter.getCloseScopeIds().map(() => "</span>"), ...iter.getOpenScopeIds().map((x) => `<span class="${lm.classNameForScopeId(x)}">`));
                iter.moveToSuccessor();
                const nextPos = iter.getPosition();
                res.push(escapeHTML(buf.getTextInRange([pos, nextPos])));
                if (!(await yielder())) {
                    console.error(event_loop_yielder_1.maxTimeError("Atom-IDE-Markdown-Service: Highlighter", 5));
                    break;
                }
                pos = nextPos;
            }
            return res.join("");
        }
        else {
            return sourceCode;
        }
    }
    finally {
        buf.destroy();
    }
}
exports.highlightTreeSitter = highlightTreeSitter;
async function tokenized(lm) {
    return new Promise((resolve) => {
        if (lm.fullyTokenized || lm.tree) {
            resolve(undefined);
        }
        else if (lm.onDidTokenize) {
            const disp = lm.onDidTokenize(() => {
                disp.dispose();
                resolve(undefined);
            });
        }
        else {
            resolve(undefined);
        }
    });
}
function escapeHTML(str) {
    return str
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaGlnaGxpZ2h0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQStDO0FBQy9DLG1FQUEyRTtBQXlCcEUsS0FBSyxVQUFVLG1CQUFtQixDQUFDLFVBQWtCLEVBQUUsU0FBaUI7SUFDN0UsTUFBTSxPQUFPLEdBQUcscUNBQWdCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQzNDLE1BQU0sR0FBRyxHQUFHLElBQUksaUJBQVUsRUFBRSxDQUFBO0lBQzVCLElBQUk7UUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNyRCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLCtCQUErQixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUN0RSxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3ZCLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDdkIsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQ2hDLElBQUksRUFBRSxDQUFDLGVBQWU7WUFBRSxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUE7UUFDNUMsTUFBTSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDbkIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixFQUFFLENBQUE7UUFDeEMsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNqRCxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFBO1lBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDZCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7WUFDZCxPQUFPLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDN0UsR0FBRyxDQUFDLElBQUksQ0FDTixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFDL0MsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDcEYsQ0FBQTtnQkFDRCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUE7Z0JBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtnQkFDbEMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFFeEQsSUFBSSxDQUFDLENBQUMsTUFBTSxPQUFPLEVBQUUsQ0FBQyxFQUFFO29CQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLGlDQUFZLENBQUMsd0NBQXdDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtvQkFDeEUsTUFBSztpQkFDTjtnQkFDRCxHQUFHLEdBQUcsT0FBTyxDQUFBO2FBQ2Q7WUFDRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7U0FDcEI7YUFBTTtZQUNMLE9BQU8sVUFBVSxDQUFBO1NBQ2xCO0tBQ0Y7WUFBUztRQUNSLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtLQUNkO0FBQ0gsQ0FBQztBQXRDRCxrREFzQ0M7QUFFRCxLQUFLLFVBQVUsU0FBUyxDQUFDLEVBQWdCO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QixJQUFJLEVBQUUsQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLElBQUksRUFBRTtZQUNoQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7U0FDbkI7YUFBTSxJQUFJLEVBQUUsQ0FBQyxhQUFhLEVBQUU7WUFDM0IsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFDZCxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7WUFDcEIsQ0FBQyxDQUFDLENBQUE7U0FDSDthQUFNO1lBQ0wsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1NBQ25CO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsR0FBVztJQUM3QixPQUFPLEdBQUc7U0FDUCxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztTQUN0QixPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztTQUNyQixPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztTQUNyQixPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztTQUN2QixPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0QnVmZmVyLCBMYW5ndWFnZU1vZGUgfSBmcm9tIFwiYXRvbVwiXG5pbXBvcnQgeyBldmVudExvb3BZaWVsZGVyLCBtYXhUaW1lRXJyb3IgfSBmcm9tIFwiLi91dGlscy9ldmVudC1sb29wLXlpZWxkZXJcIlxuXG5kZWNsYXJlIG1vZHVsZSBcImF0b21cIiB7XG4gIGludGVyZmFjZSBHcmFtbWFyUmVnaXN0cnkge1xuICAgIGdyYW1tYXJGb3JJZChpZDogc3RyaW5nKTogR3JhbW1hclxuICAgIGxhbmd1YWdlTW9kZUZvckdyYW1tYXJBbmRCdWZmZXIoZzogR3JhbW1hciwgYjogVGV4dEJ1ZmZlcik6IExhbmd1YWdlTW9kZVxuICB9XG4gIGludGVyZmFjZSBMYW5ndWFnZU1vZGUge1xuICAgIHJlYWRvbmx5IGZ1bGx5VG9rZW5pemVkPzogYm9vbGVhblxuICAgIHJlYWRvbmx5IHRyZWU/OiBib29sZWFuXG4gICAgb25EaWRUb2tlbml6ZShjYjogKCkgPT4gdm9pZCk6IERpc3Bvc2FibGVcbiAgICBidWlsZEhpZ2hsaWdodEl0ZXJhdG9yKCk6IEhpZ2hsaWdodEl0ZXJhdG9yXG4gICAgY2xhc3NOYW1lRm9yU2NvcGVJZChpZDogU2NvcGVJZCk6IHN0cmluZ1xuICAgIHN0YXJ0VG9rZW5pemluZz8oKTogdm9pZFxuICB9XG4gIGludGVyZmFjZSBIaWdobGlnaHRJdGVyYXRvciB7XG4gICAgc2Vlayhwb3M6IHsgcm93OiBudW1iZXI7IGNvbHVtbjogbnVtYmVyIH0pOiB2b2lkXG4gICAgZ2V0UG9zaXRpb24oKTogeyByb3c6IG51bWJlcjsgY29sdW1uOiBudW1iZXIgfVxuICAgIGdldE9wZW5TY29wZUlkcz8oKTogU2NvcGVJZFtdXG4gICAgZ2V0Q2xvc2VTY29wZUlkcz8oKTogU2NvcGVJZFtdXG4gICAgbW92ZVRvU3VjY2Vzc29yKCk6IHZvaWRcbiAgfVxuICBpbnRlcmZhY2UgU2NvcGVJZCB7fVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGlnaGxpZ2h0VHJlZVNpdHRlcihzb3VyY2VDb2RlOiBzdHJpbmcsIHNjb3BlTmFtZTogc3RyaW5nKSB7XG4gIGNvbnN0IHlpZWxkZXIgPSBldmVudExvb3BZaWVsZGVyKDEwMCwgNTAwMClcbiAgY29uc3QgYnVmID0gbmV3IFRleHRCdWZmZXIoKVxuICB0cnkge1xuICAgIGNvbnN0IGdyYW1tYXIgPSBhdG9tLmdyYW1tYXJzLmdyYW1tYXJGb3JJZChzY29wZU5hbWUpXG4gICAgY29uc3QgbG0gPSBhdG9tLmdyYW1tYXJzLmxhbmd1YWdlTW9kZUZvckdyYW1tYXJBbmRCdWZmZXIoZ3JhbW1hciwgYnVmKVxuICAgIGJ1Zi5zZXRMYW5ndWFnZU1vZGUobG0pXG4gICAgYnVmLnNldFRleHQoc291cmNlQ29kZSlcbiAgICBjb25zdCBlbmQgPSBidWYuZ2V0RW5kUG9zaXRpb24oKVxuICAgIGlmIChsbS5zdGFydFRva2VuaXppbmcpIGxtLnN0YXJ0VG9rZW5pemluZygpXG4gICAgYXdhaXQgdG9rZW5pemVkKGxtKVxuICAgIGNvbnN0IGl0ZXIgPSBsbS5idWlsZEhpZ2hsaWdodEl0ZXJhdG9yKClcbiAgICBpZiAoaXRlci5nZXRPcGVuU2NvcGVJZHMgJiYgaXRlci5nZXRDbG9zZVNjb3BlSWRzKSB7XG4gICAgICBsZXQgcG9zID0geyByb3c6IDAsIGNvbHVtbjogMCB9XG4gICAgICBpdGVyLnNlZWsocG9zKVxuICAgICAgY29uc3QgcmVzID0gW11cbiAgICAgIHdoaWxlIChwb3Mucm93IDwgZW5kLnJvdyB8fCAocG9zLnJvdyA9PT0gZW5kLnJvdyAmJiBwb3MuY29sdW1uIDw9IGVuZC5jb2x1bW4pKSB7XG4gICAgICAgIHJlcy5wdXNoKFxuICAgICAgICAgIC4uLml0ZXIuZ2V0Q2xvc2VTY29wZUlkcygpLm1hcCgoKSA9PiBcIjwvc3Bhbj5cIiksXG4gICAgICAgICAgLi4uaXRlci5nZXRPcGVuU2NvcGVJZHMoKS5tYXAoKHgpID0+IGA8c3BhbiBjbGFzcz1cIiR7bG0uY2xhc3NOYW1lRm9yU2NvcGVJZCh4KX1cIj5gKVxuICAgICAgICApXG4gICAgICAgIGl0ZXIubW92ZVRvU3VjY2Vzc29yKClcbiAgICAgICAgY29uc3QgbmV4dFBvcyA9IGl0ZXIuZ2V0UG9zaXRpb24oKVxuICAgICAgICByZXMucHVzaChlc2NhcGVIVE1MKGJ1Zi5nZXRUZXh0SW5SYW5nZShbcG9zLCBuZXh0UG9zXSkpKVxuXG4gICAgICAgIGlmICghKGF3YWl0IHlpZWxkZXIoKSkpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKG1heFRpbWVFcnJvcihcIkF0b20tSURFLU1hcmtkb3duLVNlcnZpY2U6IEhpZ2hsaWdodGVyXCIsIDUpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgcG9zID0gbmV4dFBvc1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcy5qb2luKFwiXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzb3VyY2VDb2RlXG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGJ1Zi5kZXN0cm95KClcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiB0b2tlbml6ZWQobG06IExhbmd1YWdlTW9kZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBpZiAobG0uZnVsbHlUb2tlbml6ZWQgfHwgbG0udHJlZSkge1xuICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpXG4gICAgfSBlbHNlIGlmIChsbS5vbkRpZFRva2VuaXplKSB7XG4gICAgICBjb25zdCBkaXNwID0gbG0ub25EaWRUb2tlbml6ZSgoKSA9PiB7XG4gICAgICAgIGRpc3AuZGlzcG9zZSgpXG4gICAgICAgIHJlc29sdmUodW5kZWZpbmVkKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpIC8vIG51bGwgbGFuZ3VhZ2UgbW9kZVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gZXNjYXBlSFRNTChzdHI6IHN0cmluZykge1xuICByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKVxuICAgIC5yZXBsYWNlKC88L2csIFwiJmx0O1wiKVxuICAgIC5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKVxuICAgIC5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKVxuICAgIC5yZXBsYWNlKC8nL2csIFwiJiMwMzk7XCIpXG59XG4iXX0=